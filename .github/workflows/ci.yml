name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      auto_commit:
        description: 'Auto commit and push changes'
        required: true
        default: true
        type: boolean

jobs:
  auto-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      should_publish: ${{ steps.bump.outputs.should_publish }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Auto version bump
      id: bump
      run: |
        # Get current version
        CURRENT_VERSION=$(python -c "from scalebox.version import get_version; print(get_version())")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Run version bump
        python scripts/bump_version.py ${{ github.event.inputs.bump_type }} --no-tag
        
        # Get new version
        NEW_VERSION=$(python -c "from scalebox.version import get_version; print(get_version())")
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Check if version changed
        if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
          echo "should_publish=true" >> $GITHUB_OUTPUT
          echo "Version bumped from $CURRENT_VERSION to $NEW_VERSION"
        else
          echo "should_publish=false" >> $GITHUB_OUTPUT
          echo "No version change needed"
        fi
    
    - name: Commit and push changes
      if: steps.bump.outputs.should_publish == 'true' && github.event.inputs.auto_commit == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "chore: auto-bump version to ${{ steps.bump.outputs.new_version }}"
        git push origin main
    
    - name: Create and push tag
      if: steps.bump.outputs.should_publish == 'true' && github.event.inputs.auto_commit == 'true'
      run: |
        git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release v${{ steps.bump.outputs.new_version }}"
        git push origin "v${{ steps.bump.outputs.new_version }}"

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Lint with flake8
      run: |
        flake8 scalebox --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 scalebox --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check scalebox
    
    - name: Check import sorting with isort
      run: |
        isort --check-only scalebox
    
    - name: Type check with mypy
      run: |
        mypy scalebox --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        # Run only basic tests that don't require external dependencies
        pytest scalebox/test/test_basic.py -v --tb=short
      env:
        CSX_API_KEY: ${{ secrets.CSX_API_KEY }}
    
    # Coverage reporting disabled for now due to test complexity
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: ./coverage.xml
    #     flags: unittests
    #     name: codecov-umbrella
    #     fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: [test, auto-version]
    if: always() && (needs.auto-version.result == 'success' && needs.auto-version.outputs.should_publish == 'true') || (needs.auto-version.result == 'skipped' && github.event_name != 'workflow_dispatch')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: [test, build, auto-version]
    if: always() && (needs.auto-version.result == 'success' && needs.auto-version.outputs.should_publish == 'true') || (needs.auto-version.result == 'skipped' && github.event_name != 'workflow_dispatch' && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
